
class Jaula:
    def init(self, jaula, patio):
        self.jaula = jaula
        self.patio = patio

class Animal(ABC):
    def init(self, nombre_cientifico, nombre_comun, periodo_gestacion, procedencia, cantidad, jaula, patio):
        self.nombre_cientifico = nombre_cientifico
        self.nombre_comun = nombre_comun
        self.periodo_gestacion = periodo_gestacion
        self.procedencia = procedencia
        self.cantidad = cantidadVi
        self.jaula = Jaula(jaula, patio)

    def mostrar_info(self):
        print(f"Especie: {self.especie})
        print(f"Nombre común: {self.nombre_comun}")
        print(f"Nombre científico: {self.nombre_cientifico}")
        print(f"Cantidad: {self.cantidad}")
        print(f"Período de gestación: {self.periodo_gestacion}")
        print(f"Región de procedencia: {self.procedencia}")
        print(f"Jaula: {self.jaula.jaula} - Patio: {self.jaula.patio}")

    @abstractmethod    
    def mostrar(self):
        pass

class Reptil(Animal):
    def init(self, nombre_cientifico, nombre_comun, periodo_gestacion, procedencia, cantidad, jaula, patio):
        super().init(nombre_cientifico, nombre_comun, periodo_gestacion, procedencia, cantidad, jaula, patio)

    def mostrar(self):
        print("Es un reptil.")

class Ave(Animal):
    def init(self, nombre_cientifico, nombre_comun, periodo_gestacion, procedencia, cantidad, jaula, patio):
        super().init(nombre_cientifico, nombre_comun, periodo_gestacion, procedencia, cantidad, jaula, patio)

    def mostrar(self):
        print("Es un ave.")

class Mamifero(Animal):
    def init(self, nombre_cientifico, nombre_comun, periodo_gestacion, procedencia, cantidad, jaula, patio):
        super().init(nombre_cientifico, nombre_comun, periodo_gestacion, procedencia, cantidad, jaula, patio)

    def mostrar(self):
        print("Es un mamífero.")

class Pez(Animal):
    def init(self, nombre_cientifico, nombre_comun, periodo_gestacion, procedencia, cantidad, jaula, patio):
        super().init(nombre_cientifico, nombre_comun, periodo_gestacion, procedencia, cantidad, jaula, patio)

    def mostrar(self):
        print("Es un pez.")

class Zoo:
    def init(self):
        self.animales = []

    def agregar_animal(self, animal):
        self.animales.append(animal)

    def listar_animales(self):
        for animal in self.animales:
            animal.mostrar()

def llenar_zoo():
       zoo=Zoo()

    while True:
        opcion = input("¿Desea agregar un animal al zoológico? (s/n): ")
        if opcion.lower() != 's':
            break
        
        datos_animal = ingresar_datos_animal()
        tipo_animal = input("Ingrese el tipo de animal (reptil/ave/mamifero/pez): ")
        
        if tipo_animal.lower() == 'reptil':
            animal = Reptil(*datos_animal)
        elif tipo_animal.lower() == 'ave':
            animal = Ave(*datos_animal)
        elif tipo_animal.lower() == 'mamifero':
            animal = Mamifero(*datos_animal)
        elif tipo_animal.lower() == 'pez':
            animal = Pez(*datos_animal)
        else:
            print("Tipo de animal no válido. Intente de nuevo.")
        zoo.agregar_animal(animal)

    zoo.listar_animales()

if name == "main":
    llenar_zoo
[2/3, 7:54 p. m.] Mël: #Clase Jaula
class Jaula:
   def __init__(self,jaula,patio):
      self.jaula = jaula
      self.patio = patio
# Clase Abstracta para TODO tipo de animal
class Animal():

   def __init__(self, cantidad, periodo_gestacion, nombre_cientifico, nombre_comun, region_procedencia,jaula,patio):
      self.cantidad           = cantidad
      self.periodo_gestacion  = periodo_gestacion
      self.nombre_cientifico  = nombre_cientifico
      self.nombre_comun       = nombre_comun
      self.region_procedencia = region_procedencia
      self.jaula              = Jaula(jaula,patio)

/// from animal import Animal

class Ave(Animal):
   def __init__(self, cantidad, periodo_gestacion, nombre_cientifico, nombre_comun, region_procedencia, jaula, patio, color_plumas):
      super().__init__(cantidad, periodo_gestacion, nombre_cientifico, nombre_comun, region_procedencia, jaula, patio)
      self.color_plumas = color_plumas
   def mostrar(self):
      print(f"Nombre:{self.nombre_comun}.")
      print(f"Nombre Cientifico: {self.nombre_cientifico}.")
      print(f"Color Plumaje: {self.color_plumas}.")
      print(f"Jaula: '{self.jaula.jaula}' - Patio: {self.jaula.patio}.")
      print(f"Procedencia: {self.region_procedencia}.")
      print(f"Gestacion: {self.periodo_gestacion} meses.")
[2/3, 7:55 p. m.] Mël: from animal import Animal

class Mamifero(Animal):
    def __init__(self, cantidad, periodo_gestacion, nombre_cientifico, nombre_comun, region_procedencia, jaula, patio, tipo_pelo):
        super().__init__(cantidad, periodo_gestacion, nombre_cientifico, nombre_comun, region_procedencia, jaula, patio)
        self.tipo_pelo = tipo_pelo
    def mostrar(self):
        print(f"Nombre:{self.nombre_comun}.")
        print(f"Nombre Cientifico: {self.nombre_cientifico}.")
        print(f"Tipo de Pelaje: {self.tipo_pelo}.")
        print(f"Jaula: '{self.jaula.jaula}' - Patio: {self.jaula.patio}.")
        print(f"Procedencia: {self.region_procedencia}.")
        print(f"Gestacion: {self.periodo_gestacion} meses.")
[2/3, 7:55 p. m.] Mël: from animal import Animal
class Pez(Animal):
   def __init__(self, cantidad, periodo_gestacion, nombre_cientifico, nombre_comun, region_procedencia, jaula, patio, cantidad_aletas):
      super().__init__(cantidad, periodo_gestacion, nombre_cientifico, nombre_comun, region_procedencia, jaula, patio)
      self.cantidad_aletas = cantidad_aletas
   def mostrar(self):
        print(f"Nombre:{self.nombre_comun}.")
        print(f"Nombre Cientifico: {self.nombre_cientifico}.")
        print(f"Cantidad de Aletas: {self.cantidad_aletas}.")
        print(f"Jaula: '{self.jaula.jaula}' - Patio: {self.jaula.patio}.")
        print(f"Procedencia: {self.region_procedencia}.")
        print(f"Gestacion: {self.periodo_gestacion} meses.")
[2/3, 7:55 p. m.] Mël: from animal import Animal

class Reptil(Animal):
   def __init__(self, cantidad, periodo_gestacion, nombre_cientifico, nombre_comun, region_procedencia, jaula, patio, venenoso):
      super().__init__(cantidad, periodo_gestacion, nombre_cientifico, nombre_comun, region_procedencia, jaula, patio)
      self.venenoso = venenoso
   def mostrar(self):
      if self.venenoso is True:
         veneno = {"Si"}
      else: veneno = {"No"}
      print(f"Nombre:{self.nombre_comun}.")
      print(f"Nombre Cientifico: {self.nombre_cientifico}.")
      print(f"Venenoso: {veneno}.")
      print(f"Jaula: '{self.jaula.jaula}' - Patio: {self.jaula.patio}.")
      print(f"Procedencia: {self.region_procedencia}.")
      print(f"Gestacion: {self.periodo_gestacion} meses.")
